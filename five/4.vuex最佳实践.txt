一、核心概念(推荐的使用vuex最简洁写法)
    State -- this.$store.state.xxx 取值 -- mapState 取值
    Getter -- this.$store.getters.xxx 取值 -- mapGetters 取值
    Mutation -- this.$store.commit('xxx') 赋值 -- mapMutations 赋值
    Action -- this.$store.dispatch('xxx') 赋值 -- mapActions 赋值
    Module 模块化，进一步进行组织管理
        开启命名空间 namespaced：true
        嵌套模块不要过深，尽量扁平化
        灵活应用createNamespacedHelper

二、在原有项目基础上引入vuex
    https://blog.csdn.net/dkr380205984/article/details/82185740



三.阅读大佬编写代码,学习到的编码小技巧
    // 1.对象展开符的理解与使用
    let arr = [1,2,3];
    console.log(...arr);
    // mapState返回值为对象,对象中count sex对应的是函数
    let MapState = mapState({
      count: 'count',
      sex: (state) => state.sex
    })
    // ...MapState将对象展开,与已有的'a'属性合并返回对象赋值给json
    let json = {
      'a': '我是json自带的',
      ...MapState
    }
    console.log('MapState===', MapState);
    console.log('json===', json);

    2.解构展开符巧用法 == 克隆
    let a = [1,2,{a:{b:'abb'}, b:'baa'}];
    let b = [...a];
    a[0] = 10;
    console.log('a==', a);
    console.log('b==', b);
    console.log('===================================');
    let c = {a:{b:'abb'}, b:'baa'};
    let d = {...c};
    c.a = 'hahah';
    console.log('c===', c);
    console.log('d===', d);

    3.ES6中find与filter函数区别
      let a = [{id:1}, {id:2}, {id:3}];
      const findTarget = a.find(item => item.id === 1);
      console.log('findTarget===', findTarget); // {id: 1}
      const filterTarget = a.filter(item => item.id === 1);
      console.log('filterTarget===', filterTarget); // [{id: 1}]

    4.属性名与变量名一致,直接写变量即可
      let id = 1;
      let b = {id , name:'yl'}
      let c = {id:id, name:'yl'};
      console.log('b===', b); // {id: 1, name: "yl"}
      console.log('c===', c); // {id: 1, name: "yl"}